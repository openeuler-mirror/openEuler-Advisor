basic:
  PRSubmissionSPEC:
  -
    name: PR-title-check
    condition: null
    claim: PR的标题清晰易懂
    explain: 提交标题应该一句话说明本提交实现的内容。
  -
    name: PR-content-check
    condition: null
    claim: PR的内容描述详细具体
    explain: 提交的描述应该用一段话说明本提交的背景和实现原理。
  -
    name: PR-consistency-check
    condition: null
    claim: PR和实际代码修改和内容描述一致
    explain: 提交的说明文字应该和实际代码修改内容保持一致。
  -
    name: PR-clean-submission
    condition: null
    claim: 应当一个 PR 完成一件事情
    explain: PR 应当完成一件有意义的事情，不应该把一个修改目标拆成多个 PR，也不应该把太多修改目标整合在一个 PR 中。不建议对过于简单的工作单独发起 PR。
  -
    name: PR-standard-check
    condition: null
    claim: PR符合gitee的规范检查要求
    explain: 码云对提交的缺陷扫描、规范扫描告警每一条都需要确认。
  -
    name: PR-CI-result
    condition: null
    claim: PR应该通过所有CI测试，包括不同架构的 check_install 测试
    explain: check_consistency 由于基础设施问题可忽略，其他CI项目如失败必须给出说明。
  -
    name: PR-temp-check
    condition: new-file-add
    claim: PR中不包含临时文件
    explain: 不能提交临时或无用文件。
  CleanCode:
  -
    name: static-check
    condition: code-modified
    claim: 新增代码符合规范要求
    explain: 修改涉及代码使用 {lang} 语言开发，建议使用 {checker} 检查并清零告警。
  OpenSourceCompliance:
  -
    name: license-check-001
    condition: new-file-add
    claim: 新增代码文件起始包含License信息
    explain: 代码文件开头需要有Copyright和License信息，所使用的License需和本项目使用的License兼容。
  -
    name: license-check-002
    condition: license-change
    claim: 新License与openEuler兼容
    explain: spec中License变化，需确保新的License授权与openEuler兼容。
  SecurityPrivacy:
  -
    name: sensitive-info-check
    condition: code-modified
    claim: 新增代码不包含密码、口令、token、密钥等敏感数据
    explain: 提交的代码不应包含密码等敏感数据。
  Compatibility:
  -
    name: compatibility-check
    condition: version-change
    claim: 新版本能兼容老版本
    explain: spec中version版本变化，非master分支软件版本升级需考虑兼容性
src-openeuler:
  PackageSubmission:
  -
    name: PR-latest-version
    condition: null
    claim: 提交到 master 分支的新版本，是否已经是主线最新的
    explain: 原则上 master 分支要求必须是最新的社区上游版本

  -
    name: PR-upgrade-check
    condition: null
    claim: 版本升级中的差异应当分析说明
    explain: compare_package的结果应当给出分析，保证版本差异的可理解。

  - 
    name: PR-increamental-rls
    condition: null
    claim: Version.Release 是否递增
    explain: 如果Version.Release回退会给升级带来麻烦。如果Version不变则Release增加，如果Version增加则Release归零

  -
    name: PR-license
    condition: null
    claim: CI License检查是否正确
    explain: License错误必须解决

  -
    name: PR-source-integerity
    condition: null
    claim: 源码包完整来自可信的上游
    explain: Source0等应该是完整的 URL，来自社区上游的代码托管地址。URL下载得到的源码包与 PR 中提供的二进制完全一致

  -
    name: PR-clean-description
    condition: null
    claim: description 部分清晰可读
    explain: 如 description 部分为自动抓取生成，需要做清理

  -
    name: PR-openEuler-clean
    condition: null
    claim: 不包含无意义的冗余判断
    explain: spec 文件中不应该包含对 openEuler 环境无意义宏判断

  -
    name: PR-selftest
    condition: null
    claim: 是否有 %check 内容
    explain: RPM 应该尽量包含自验证测试用例
  -
    name: PR-doc
    condition: null
    claim: 是否应单独生成-help子包
    explain: 若文档内容多，则应独立生成 -help 子包

  -
    name: PR-changelog
    condition: null
    claim: changelog 记录是否合理
    explain: Changelog 格式要符合要求，变更记录易于阅读理解。如果是版本升级，需要简单摘要说明升级带来的变化。

customization:
  community:
  -
    name: sanity_check
    condition: sanity_check
    claim: ""
    explain: "" 
    cmd: "python3 ci-scripts/sanity_check.py ."
    failed:
      claim: "PR必须通过CI检查"
      explain: "sanity_check.py 在这个 PR 中发现错误。"
    success:
      claim: "所有变更的代码仓都被恰当的 SIG 管理"
      explain: "代码仓应当由有能力且有意愿的SIG管理，同一类的软件尽量归属同一个SIG。"
    lgtm-chk:
      claim: "{sig}的维护者同意变更"
      explain: "需要 {owners} 中至少一人在PR的review中留下 \"/lgtm\" 表示确认。"
    dlt-chk:
      claim: "已确认删除 {repo} "
      explain: "为了保证兼容性，技术委员会建议将 {repo} 移动到 sig-recycle 管理一段时间，给用户切换时间。"
  -
    name: single-submission
    condition: null
    claim: 建议PR中只有一次提交
    explain: 如果PR中包含多次提交，建议整合成一个，保持提交记录整洁。[[Gitee work flow](https://gitee.com/openeuler/community/blob/master/zh/contributors/Gitee-workflow.md)]
  -
    name: maintainer-add-explain
    condition: maintainer-change
    claim: "如果新增维护者，已对他/她的能力做客观说明"
    explain: "PR提交者需要提出相应的举证说明维护者候选人的技术能力与社区活跃程度。"
  -
    name: maintainer-change-lgtm
    condition: maintainer-change
    claim: "{sig} 中的其他维护者已同意增加/删除维护者"
    explain: "需要 {owners} 中至少两人代表在此 PR 的 review 中留下 \"/lgtm\" 表示确认同意接纳或者移除维护者。"
  -
    name: sig-update-lgtm
    condition: sig-update
    claim: "{sig} 已同意更新 SIG 信息"
    explain: "{owners} 中是否有代表通过在此 PR 的 review 中留下 \"/lgtm\" 表示同意。"
  -
    name: repo-info-check
    condition: repo-introduce
    claim: "已正确提供代码仓上游信息"
    explain: "使用软件社区的正式官方网址，或者无单独正式官网的情况下，提供主流代码托管商上面对应的项目网址（如github）。不可使用maven等托管库作为官方网址。"
  -
    name: repo-name-check
    condition: repo-introduce
    claim: "代码仓名称规范"
    explain: "代码仓名称必须和上游官网/社区保持一致，不可随意命名。不允许以软件包中的子模块作为代码仓名。当软件是某个语言的开发库时，可以使用前缀予以规范化管理（如 python-，perl-等）。"
  -
    name: upstream-lifecycle-check
    condition: repo-introduce
    claim: "新引入代码仓的上游仍处于生命周期内"
    explain: "已经衰退的软件，生命周期结束，社区停运，或超过5年没有任何更新的软件，原则上不引入openEuler。如果提交者认为非常有必要，可以考虑在 openeuler 中 fork 以后独立维护。"
  -
    name: repo-license-check
    condition: repo-introduce
    claim: "新引入的代码仓的 License 授权与 openEuler 兼容"
    explain: "openEuler只能接纳可以被允许集成的软件。"
  -
    name: repo-copyright-check
    condition: repo-introduce
    claim: "新引入的代码仓有 Copyright 信息"
    explain: "我们期望软件有明确的 Copyright 信息。"
  -
    name: repo-ownership-check
    condition: repo-ownership-change
    claim: "{repos} 从 **{sig1}** 移交到 **{sig2}** ，需要双方sig中至少各有一位owner同意"
    explain: "需要 **{sig1}** 的 {owners1} 及 **{sig2}** 的 {owners2} 各有至少一名owner代表在此 PR 中留下 \"/lgtm\" 表示同意移交。"
    to_recycle:
      claim: "{repos} 从 **{sig1}** 移交到 **{sig2}** ，需要**sig-release-management**有代表同意"
      explain: "{repos}存在除master外的其它保护分支，需要**sig-release-management**的 {owners} 中至少一名owner代表在此 PR 中留下 \"/lgtm\" 表示同意。"
  -
    name: branch-check
    condition: new-branch-add
    claim: "代码仓增加非 master 分支，要得到Release Management团队同意"
    explain: "代码仓的非master分支会被发布版本构建使用，因此需要 {owners} 中至少一人在PR的review中留下 \"/lgtm\" 表示确认。"
